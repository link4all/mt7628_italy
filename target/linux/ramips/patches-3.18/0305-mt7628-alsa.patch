diff -Nura a/sound/soc/ralink/Kconfig b/sound/soc/ralink/Kconfig
--- a/sound/soc/ralink/Kconfig	2016-07-21 17:18:52.000000000 +0800
+++ b/sound/soc/ralink/Kconfig	2016-07-18 11:33:01.000000000 +0800
@@ -13,3 +13,19 @@
 	help
 	  Say Y if you want to add support for ASoC audio on the Qi LB60 board
 	  a.k.a Qi Ben NanoNote.
+
+config SND_MT7628_SOC_I2S
+	depends on SOC_MT7620 && SND_SOC
+	select SND_SOC_GENERIC_DMAENGINE_PCM
+	tristate "SoC Audio (I2S protocol) for MediaTek MT7628 SoC"
+	help
+	  Say Y if you want to use I2S protocol and I2S codec on VoCore2+Dock
+	  MT7628AN based boards.
+
+config SND_MT7628_SOC_AUDIO
+	tristate "SoC Audio support for MediaTek MT7628 SoC"
+	select SND_MT7628_SOC_I2S
+	select SND_SOC_ES8328
+	help
+	  Say Y if you want to add support for ASoC audio codec on VoCore2+Dock
+	  MT7628AN based boards.
+
diff -Nura a/sound/soc/ralink/Makefile b/sound/soc/ralink/Makefile
--- a/sound/soc/ralink/Makefile	2016-07-21 17:19:32.000000000 +0800
+++ b/sound/soc/ralink/Makefile	2016-07-18 09:47:28.000000000 +0800
@@ -1,11 +1,10 @@
-#
-# Jz4740 Platform Support
-#
 snd-soc-mt7620-i2s-objs := mt7620-i2s.o
+snd-soc-mt7628-i2s-objs := mt7628-i2s.o
 
 obj-$(CONFIG_SND_MT7620_SOC_I2S) += snd-soc-mt7620-i2s.o
+obj-$(CONFIG_SND_MT7628_SOC_I2S) += snd-soc-mt7628-i2s.o
 
-# Jz4740 Machine Support
 snd-soc-mt7620-wm8960-objs := mt7620-wm8960.o
+snd-soc-mt7628-audio-objs := mt7628-audio.o
 
-obj-$(CONFIG_SND_MT7620_SOC_WM8960) += snd-soc-mt7620-wm8960.o
+obj-$(CONFIG_SND_MT7628_SOC_AUDIO) += snd-soc-mt7628-audio.o
diff -Nura a/sound/soc/ralink/mt7628-audio.c b/sound/soc/ralink/mt7628-audio.c
--- a/sound/soc/ralink/mt7628-audio.c	1970-01-01 08:00:00.000000000 +0800
+++ b/sound/soc/ralink/mt7628-audio.c	2016-07-21 17:15:09.000000000 +0800
@@ -0,0 +1,125 @@
+#include <linux/module.h>
+#include <linux/of_platform.h>
+#include <linux/i2c.h>
+#include <linux/slab.h>
+#include <sound/soc.h>
+#include <sound/pcm_params.h>
+#include <sound/soc-dapm.h>
+#include <linux/pinctrl/consumer.h>
+
+struct mt7628_audio_data {
+	struct snd_soc_dai_link dai;
+	struct snd_soc_card card;
+};
+
+static int mt7628_audio_probe(struct platform_device *pdev)
+{
+	struct device_node *i2s_of_node, *codec_of_node;
+	struct platform_device *i2s_pdev;
+	struct i2c_client *codec_dev;
+	struct mt7628_audio_data *ad = NULL;
+	const char *codec_dai_name;
+	int ret;
+
+	ret = of_property_read_string(pdev->dev.of_node, "codec-dai-name", &codec_dai_name);
+	if (ret) {
+		dev_err(&pdev->dev, "codec dai name is missing or invalid.\n");
+		return ret;
+	}
+
+	i2s_of_node = of_parse_phandle(pdev->dev.of_node, "i2s-node", 0);
+	codec_of_node = of_parse_phandle(pdev->dev.of_node, "codec-node", 0);
+	if (!i2s_of_node || !codec_of_node) {
+		dev_err(&pdev->dev, "i2s/codec handle is missing or invalid.\n");
+		ret = -EINVAL;
+		goto mt7628_audio_probe_error;
+	}
+
+	i2s_pdev = of_find_device_by_node(i2s_of_node);
+	if (!i2s_pdev) {
+		dev_err(&pdev->dev, "can not find i2s platform device.\n");
+		ret = -EINVAL;
+		goto mt7628_audio_probe_error;
+	}
+	codec_dev = of_find_i2c_device_by_node(codec_of_node);
+	if (!codec_dev || !codec_dev->dev.driver) {
+		dev_err(&pdev->dev, "can not find codec platform device.\n");
+		ret = -EINVAL;
+		goto mt7628_audio_probe_error;
+	}
+
+	ad = devm_kzalloc(&pdev->dev, sizeof(struct mt7628_audio_data), GFP_KERNEL);
+	if (!ad) {
+		ret = -ENOMEM;
+		goto mt7628_audio_probe_error;
+	}
+
+	ad->dai.name = pdev->name;
+	ad->dai.stream_name = pdev->name;
+	ad->dai.codec_dai_name = codec_dai_name;
+	ad->dai.codec_of_node = codec_of_node;
+	ad->dai.cpu_dai_name = dev_name(&i2s_pdev->dev);
+	ad->dai.platform_of_node = i2s_of_node;
+	ad->dai.dai_fmt = SND_SOC_DAIFMT_I2S | SND_SOC_DAIFMT_NB_NF |
+			    SND_SOC_DAIFMT_CBM_CFM;
+
+	ad->card.dev = &pdev->dev;
+	ad->card.name = "mt7628-audio-card";
+	ad->card.num_links = 1;
+	ad->card.dai_link = &ad->dai;
+
+	platform_set_drvdata(pdev, ad);
+
+	ret = devm_snd_soc_register_card(&pdev->dev, &ad->card);
+	if (ret) {
+		dev_err(&pdev->dev, "can not register audio card.");
+		goto mt7628_audio_probe_error;
+	}
+
+	of_node_put(i2s_of_node);
+	of_node_put(codec_of_node);
+
+	dev_info(&pdev->dev, "load");
+	return 0;
+
+mt7628_audio_probe_error:
+	if (ad)
+		devm_kfree(&pdev->dev, ad);
+	if (i2s_of_node)
+		of_node_put(i2s_of_node);
+	if (codec_of_node)
+		of_node_put(codec_of_node);
+
+	return ret;
+}
+
+static int mt7628_audio_remove(struct platform_device *pdev)
+{
+	struct mt7628_audio *ad = platform_get_drvdata(pdev);
+	if(ad)
+		devm_kfree(&pdev->dev, ad);
+	return 0;
+}
+
+static const struct of_device_id mt7628_audio_ofs[] = {
+	{ .compatible = "mediatek,mt7628-audio", },
+	{ }
+};
+MODULE_DEVICE_TABLE(of, mt7628_audio_ofs);
+
+static struct platform_driver mt7628_audio_driver = {
+	.driver = {
+		.name = "mt7628-audio",
+		.owner = THIS_MODULE,
+		.pm = &snd_soc_pm_ops,
+		.of_match_table = mt7628_audio_ofs,
+	},
+	.probe = mt7628_audio_probe,
+	.remove = mt7628_audio_remove,
+};
+module_platform_driver(mt7628_audio_driver);
+
+MODULE_AUTHOR("Qin Wei <me@vocore.io>");
+MODULE_DESCRIPTION("mt7628 with audio codec driver");
+MODULE_LICENSE("GPL");
+MODULE_ALIAS("platform:mt7628-audio");
diff -Nura a/sound/soc/ralink/mt7628-i2s.c b/sound/soc/ralink/mt7628-i2s.c
--- a/sound/soc/ralink/mt7628-i2s.c	1970-01-01 08:00:00.000000000 +0800
+++ b/sound/soc/ralink/mt7628-i2s.c	2016-08-23 18:21:44.000000000 +0800
@@ -0,0 +1,388 @@
+#include <linux/init.h>
+#include <linux/io.h>
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/platform_device.h>
+#include <linux/slab.h>
+#include <linux/math64.h>
+#include <linux/delay.h>
+#include <linux/clk.h>
+
+#include <linux/dma-mapping.h>
+
+#include <sound/core.h>
+#include <sound/pcm.h>
+#include <sound/pcm_params.h>
+#include <sound/soc.h>
+#include <sound/initval.h>
+#include <sound/dmaengine_pcm.h>
+
+#include <asm/mach-ralink/ralink_regs.h>
+
+#define I2S_REG_CFG0		0x00
+#define I2S_REG_CFG0_EN		BIT(31)
+#define I2S_REG_CFG0_DMA_EN	BIT(30)
+#define I2S_REG_CFG0_BYTE_SWAP	BIT(28)
+#define I2S_REG_CFG0_TX_EN	BIT(24)
+#define I2S_REG_CFG0_RX_EN	BIT(20)
+#define I2S_REG_CFG0_SLAVE	BIT(16)
+#define I2S_REG_CFG0_RX_THRES	12
+#define I2S_REG_CFG0_TX_THRES	4
+#define I2S_REG_CFG0_DFT_THRES	(4 << I2S_REG_CFG0_RX_THRES) | \
+				(4 << I2S_REG_CFG0_TX_THRES)
+
+#define I2S_REG_INT_STATUS	0x04
+#define I2S_REG_INT_EN		0x08
+#define I2S_REG_FF_STATUS	0x0c
+#define I2S_REG_WREG		0x10
+#define I2S_REG_RREG		0x14
+#define I2S_REG_CFG1		0x18
+
+#define I2S_REG_DIVCMP		0x20
+#define I2S_REG_DIVINT		0x24
+#define I2S_REG_CLK_EN		BIT(31)
+
+struct mt7628_i2s {
+	struct resource *res;
+	void __iomem *base;
+	unsigned int sys_freq;
+
+	struct snd_dmaengine_dai_dma_data playback_dma;
+	struct snd_dmaengine_dai_dma_data capture_dma;
+};
+
+static inline uint32_t mt7628_i2s_read(const struct mt7628_i2s *i2s,
+	unsigned int reg)
+{
+	return readl(i2s->base + reg);
+}
+
+static inline void mt7628_i2s_write(const struct mt7628_i2s *i2s,
+	unsigned int reg, uint32_t value)
+{
+	writel(value, i2s->base + reg);
+}
+
+static int mt7628_i2s_startup(struct snd_pcm_substream *substream,
+	struct snd_soc_dai *dai)
+{
+	struct mt7628_i2s *i2s = snd_soc_dai_get_drvdata(dai);
+	uint32_t reg;
+
+	if (dai->active)
+		return 0;
+
+	reg = mt7628_i2s_read(i2s, I2S_REG_CFG0);
+	reg |= I2S_REG_CFG0_EN;
+	mt7628_i2s_write(i2s, I2S_REG_CFG0, reg);
+
+	return 0;
+}
+
+static void mt7628_i2s_shutdown(struct snd_pcm_substream *substream,
+	struct snd_soc_dai *dai)
+{
+	struct mt7628_i2s *i2s = snd_soc_dai_get_drvdata(dai);
+	uint32_t reg;
+
+	if (dai->active)
+		return;
+
+	reg = mt7628_i2s_read(i2s, I2S_REG_CFG0);
+	reg &= ~I2S_REG_CFG0_EN;
+	mt7628_i2s_write(i2s, I2S_REG_CFG0, reg);
+}
+
+static int mt7628_i2s_trigger(struct snd_pcm_substream *substream, int cmd,
+	struct snd_soc_dai *dai)
+{
+	struct mt7628_i2s *i2s = snd_soc_dai_get_drvdata(dai);
+
+	uint32_t reg;
+	uint32_t mask;
+
+	if (substream->stream == SNDRV_PCM_STREAM_PLAYBACK)
+		mask = I2S_REG_CFG0_TX_EN;
+	else
+		mask = I2S_REG_CFG0_RX_EN;
+
+	reg = mt7628_i2s_read(i2s, I2S_REG_CFG0);
+
+	switch (cmd) {
+	case SNDRV_PCM_TRIGGER_START:
+	case SNDRV_PCM_TRIGGER_RESUME:
+	case SNDRV_PCM_TRIGGER_PAUSE_RELEASE:
+		reg |= mask;
+		break;
+	case SNDRV_PCM_TRIGGER_STOP:
+	case SNDRV_PCM_TRIGGER_SUSPEND:
+	case SNDRV_PCM_TRIGGER_PAUSE_PUSH:
+		reg &= ~mask;
+		break;
+	default:
+		return -EINVAL;
+	}
+
+	if (reg & (I2S_REG_CFG0_TX_EN | I2S_REG_CFG0_RX_EN))
+		reg |= I2S_REG_CFG0_DMA_EN;
+	else
+		reg &= ~I2S_REG_CFG0_DMA_EN;
+
+	mt7628_i2s_write(i2s, I2S_REG_CFG0, reg);
+	return 0;
+}
+
+static int mt7628_i2s_set_fmt(struct snd_soc_dai *dai, unsigned int fmt)
+{
+	struct mt7628_i2s *i2s = snd_soc_dai_get_drvdata(dai);
+	uint32_t reg;
+
+	reg = mt7628_i2s_read(i2s, I2S_REG_CFG0);
+
+	switch (fmt & SND_SOC_DAIFMT_MASTER_MASK) {
+	case SND_SOC_DAIFMT_CBS_CFS:
+		reg |= I2S_REG_CFG0_SLAVE;
+		break;
+	case SND_SOC_DAIFMT_CBM_CFM:
+		reg &= ~I2S_REG_CFG0_SLAVE;
+		break;
+	case SND_SOC_DAIFMT_CBM_CFS:
+	default:
+		return -EINVAL;
+	}
+
+	switch (fmt & SND_SOC_DAIFMT_FORMAT_MASK) {
+	case SND_SOC_DAIFMT_I2S:
+	case SND_SOC_DAIFMT_MSB:
+		reg |= I2S_REG_CFG0_BYTE_SWAP;
+		break;
+	case SND_SOC_DAIFMT_LSB:
+		reg &= ~I2S_REG_CFG0_BYTE_SWAP;
+		break;
+	default:
+		return -EINVAL;
+	}
+
+	switch (fmt & SND_SOC_DAIFMT_INV_MASK) {
+	case SND_SOC_DAIFMT_NB_NF:
+		break;
+	default:
+		return -EINVAL;
+	}
+
+	mt7628_i2s_write(i2s, I2S_REG_CFG0, reg);
+	return 0;
+}
+
+static int mt7628_i2s_hw_params(struct snd_pcm_substream *substream,
+	struct snd_pcm_hw_params *params, struct snd_soc_dai *dai)
+{
+	struct mt7628_i2s *i2s = snd_soc_dai_get_drvdata(dai);
+
+	/* TODO: consider to add 24bits mode, mt7628 support that hifi mode.*/
+	uint32_t bitrate, divint, divcmp, freq = i2s->sys_freq / 2;
+	uint64_t divsum = freq;
+
+	/* set bitrate, two channels, left and right, each is 16bits */
+	bitrate = params_rate(params) * 2 * 16;
+	divint = (freq / bitrate) & 0x3ff;
+	divsum = (divsum << 9) + (bitrate >> 1);
+	divcmp = div_u64(divsum, bitrate) & 0x1ff;
+
+	mt7628_i2s_write(i2s, I2S_REG_DIVINT, divint);
+	mt7628_i2s_write(i2s, I2S_REG_DIVCMP, divcmp | I2S_REG_CLK_EN);
+
+	pr_info("set audio rate to %dHz.\n", params_rate(params));
+	return 0;
+}
+
+static int mt7628_i2s_set_sysclk(struct snd_soc_dai *dai, int clk_id,
+	unsigned int f, int dir)
+{
+	uint32_t reg;
+
+	reg = rt_sysc_r32(0x2c);
+	reg &= 0xfffff1ff;
+	switch (f) {
+	case 12000000: reg |= 0x200; break;
+	case 25000000: reg |= 0x400; break;
+	case 40000000: reg |= 0x600; break;
+	case 48000000: reg |= 0x800; break;
+	case 0:        reg |= 0xC00; break;	/* turn off reference clock */
+	default:
+		pr_err("system clock supports only 12,25,40,48MHz, not %d.\n", f);
+		return -EINVAL;
+	}
+	rt_sysc_w32(reg, 0x2c);
+
+	pr_info("set system reference clock(mclk) to %uMHz.\n", f / 1000000);
+	return 0;
+}
+
+static int mt7628_i2s_dai_probe(struct snd_soc_dai *dai)
+{
+	struct mt7628_i2s *i2s = snd_soc_dai_get_drvdata(dai);
+	struct snd_dmaengine_dai_dma_data *dma;
+	uint32_t reg;
+
+	dma = &i2s->playback_dma;
+	dma->maxburst = 16;/* unit in words, internal 32bytes fifo. */
+	dma->slave_id = 2; /* mt7628 dma i2s tx request id. */
+	dma->addr = i2s->res->start + I2S_REG_WREG;
+	dai->playback_dma_data = &i2s->playback_dma;
+
+	dma = &i2s->capture_dma;
+	dma->maxburst = 16;
+	dma->slave_id = 3; /* mt7628 dma i2s rx request id. */
+	dma->addr = i2s->res->start + I2S_REG_RREG;
+	dai->capture_dma_data = &i2s->capture_dma;
+
+	/* set share pins to reference clock mode */
+	reg = rt_sysc_r32(0x60);
+	reg &= 0xfffbffff;//clear bit18 //reg &= 0xfffffffc;//clear bit0 bit1
+	 //now refclk pin is refclk mode//reg |= 0x00000002;// set gpio0 pin refclk mode
+	rt_sysc_w32(reg, 0x60);
+
+	mt7628_i2s_write(i2s, I2S_REG_CFG0, I2S_REG_CFG0_DFT_THRES);
+	mt7628_i2s_write(i2s, I2S_REG_CFG1, 0);
+	mt7628_i2s_write(i2s, I2S_REG_INT_EN, 0);
+
+	/* default output 12MHz as codec mclk */
+	mt7628_i2s_set_sysclk(dai, 0, 12000000, 0);
+	return 0;
+}
+
+static int mt7628_i2s_dai_remove(struct snd_soc_dai *dai)
+{
+	struct mt7628_i2s *i2s = snd_soc_dai_get_drvdata(dai);
+	/* disable i2s bit clock */
+	mt7628_i2s_write(i2s, I2S_REG_DIVCMP, 0);
+	return 0;
+}
+
+static const struct snd_soc_dai_ops mt7628_i2s_dai_ops = {
+	.startup = mt7628_i2s_startup,
+	.shutdown = mt7628_i2s_shutdown,
+	.trigger = mt7628_i2s_trigger,
+	.hw_params = mt7628_i2s_hw_params,
+	.set_fmt = mt7628_i2s_set_fmt,
+	.set_sysclk = mt7628_i2s_set_sysclk,
+};
+
+static struct snd_soc_dai_driver mt7628_i2s_dai = {
+	.probe = mt7628_i2s_dai_probe,
+	.remove = mt7628_i2s_dai_remove,
+	.playback = {
+		.channels_min = 2,
+		.channels_max = 2,
+		.rates = SNDRV_PCM_RATE_8000_192000,
+		.formats = SNDRV_PCM_FMTBIT_S16_LE | SNDRV_PCM_FMTBIT_S24_LE,
+	},
+	.capture = {
+		.channels_min = 2,
+		.channels_max = 2,
+		.rates = SNDRV_PCM_RATE_8000_192000,
+		.formats = SNDRV_PCM_FMTBIT_S16_LE | SNDRV_PCM_FMTBIT_S24_LE,
+	},
+	.ops = &mt7628_i2s_dai_ops,
+	.symmetric_rates = 1,
+};
+
+static const struct snd_dmaengine_pcm_config mt7628_dmaengine_pcm_config = {
+	.prepare_slave_config = snd_dmaengine_pcm_prepare_slave_config,
+};
+
+static const struct snd_soc_component_driver mt7628_i2s_component = {
+	.name = "mt7628-i2s",
+};
+
+static int mt7628_i2s_dev_probe(struct platform_device *pdev)
+{
+	struct mt7628_i2s *i2s;
+	struct clk *clk;
+	int ret;
+
+	snd_dmaengine_pcm_register(&pdev->dev, &mt7628_dmaengine_pcm_config,
+		SND_DMAENGINE_PCM_FLAG_COMPAT |
+		SND_DMAENGINE_PCM_FLAG_NO_RESIDUE);
+
+	clk = devm_clk_get(&pdev->dev, NULL);
+	if (IS_ERR(clk)) {
+		dev_err(&pdev->dev, "unable to get i2s system clock.\n");
+		return PTR_ERR(clk);
+	}
+
+	i2s = devm_kzalloc(&pdev->dev, sizeof(struct mt7628_i2s), GFP_KERNEL);
+	if (!i2s)
+		return -ENOMEM;
+
+	i2s->res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
+	if (!i2s->res) {
+		devm_kfree(&pdev->dev, i2s);
+		return -ENOENT;
+	}
+
+	i2s->res = request_mem_region(i2s->res->start, resource_size(i2s->res), pdev->name);
+	if (!i2s->res) {
+		devm_kfree(&pdev->dev, i2s);
+		return -EBUSY;
+	}
+
+	i2s->base = ioremap_nocache(i2s->res->start, resource_size(i2s->res));
+	if (!i2s->base) {
+		ret = -EBUSY;
+		goto mt7628_i2s_dev_probe_error;
+	}
+
+	platform_set_drvdata(pdev, i2s);
+	ret = snd_soc_register_component(&pdev->dev, &mt7628_i2s_component, &mt7628_i2s_dai, 1);
+	if (!ret) {
+		i2s->sys_freq = clk_get_rate(clk);
+		dev_info(&pdev->dev, "loaded, sys freq is %uMHz.\n",
+			 i2s->sys_freq / 1000000);
+		return 0;
+	}
+
+	dev_err(&pdev->dev, "failed to register digia audio interface.\n");
+	iounmap(i2s->base);
+
+mt7628_i2s_dev_probe_error:
+	release_mem_region(i2s->res->start, resource_size(i2s->res));
+	devm_kfree(&pdev->dev, i2s);
+	return ret;
+}
+
+static int mt7628_i2s_dev_remove(struct platform_device *pdev)
+{
+	struct mt7628_i2s *i2s = platform_get_drvdata(pdev);
+
+	snd_dmaengine_pcm_unregister(&pdev->dev);
+	snd_soc_unregister_component(&pdev->dev);
+	iounmap(i2s->base);
+	release_mem_region(i2s->res->start, resource_size(i2s->res));
+
+	devm_kfree(&pdev->dev, i2s);
+	return 0;
+}
+
+static const struct of_device_id mt7628_i2s_ofs[] = {
+	{ .compatible = "mediatek,mt7628-i2s" },
+	{ },
+};
+MODULE_DEVICE_TABLE(of, mt7628_i2s_ofs);
+
+static struct platform_driver mt7628_i2s_driver = {
+	.probe = mt7628_i2s_dev_probe,
+	.remove = mt7628_i2s_dev_remove,
+	.driver = {
+		.name = "mt7628-i2s",
+		.owner = THIS_MODULE,
+		.of_match_table = mt7628_i2s_ofs,
+	},
+};
+module_platform_driver(mt7628_i2s_driver);
+
+MODULE_AUTHOR("Qin Wei <me@vocore.io>");
+MODULE_DESCRIPTION("mt7628 i2s driver");
+MODULE_LICENSE("GPL");
+MODULE_ALIAS("platform:mt7628-i2s");
